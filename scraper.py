# -*- coding: utf-8 -*-
import requests
from bs4 import BeautifulSoup
import os
from dotenv import load_dotenv
from supabase import create_client, Client
import warnings
import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
import json
import re

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ---
load_dotenv()
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_KEY")
warnings.filterwarnings('ignore', message='Unverified HTTPS request')
BASE_URL = "https://thaicarbonlabel.tgo.or.th/"

# --- 2. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SUPABASE ---
try:
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Supabase ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    exit()

# --- 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ---
def convert_be_to_iso(be_date_str):
    if not be_date_str or be_date_str == '-': return None
    try:
        parts = re.match(r"(\d{1,2})/(\d{1,2})/(\d{4})", be_date_str)
        if not parts: return None
        day, month, be_year = parts.group(1).zfill(2), parts.group(2).zfill(2), int(parts.group(3))
        if be_year < 2500: return None
        ce_year = be_year - 543
        return f"{ce_year}-{month}-{day}"
    except (ValueError, AttributeError):
        return None

# --- 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Selenium + ‡∏£‡∏≠ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£) ---
def fetch_tgo_data_with_selenium(url_to_fetch):
    """
    ‡πÉ‡∏ä‡πâ Selenium ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î URL ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡πÅ‡∏•‡∏∞‡∏£‡∏≠ table ‡∏´‡∏£‡∏∑‡∏≠ no results (Timeout 3 ‡∏ô‡∏≤‡∏ó‡∏µ)
    """
    options = webdriver.ChromeOptions()
    # options.add_argument('--headless') # ‡∏£‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    options.add_argument('--disable-gpu')
    options.add_argument('window-size=1280x720')
    options.add_argument("--log-level=3")
    driver = None
    try:
        print("     ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå (Selenium)...") # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ
        service = Service(ChromeDriverManager().install())
        driver = webdriver.Chrome(service=service, options=options)
        driver.set_page_load_timeout(180) # 3 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤
        driver.implicitly_wait(5)

        print(f"     ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà: {url_to_fetch}")
        driver.get(url_to_fetch)

        print("     ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î...")
        wait = WebDriverWait(driver, 180) # 3 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤

        table_selector = (By.CLASS_NAME, 'catalog-table')
        
        # --- üéØ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---
        # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô XPATH ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö
        # (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö class 'alert-warning' ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
        no_results_selector = (By.XPATH, "//*[contains(@class, 'alert-warning') or contains(text(), '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•') or contains(text(), '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')]")
        # --- üéØ [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

        # [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡πÉ‡∏´‡πâ‡∏™‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
        print(f"     ‡∏£‡∏≠‡πÉ‡∏´‡πâ '{table_selector[1]}' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' ‡∏õ‡∏£‡∏≤‡∏Å‡∏è...")

        element_found = wait.until(
            EC.any_of(
                EC.presence_of_element_located(table_selector),
                EC.presence_of_element_located(no_results_selector) # <-- ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
            )
        )

        try:
            driver.find_element(*table_selector) # ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            print("     -> ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!")
            print("     ‡∏£‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...")
            time.sleep(5)
            print("     ‚úÖ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡πâ‡∏î HTML...")
            return driver.page_source
        except NoSuchElementException:
            # [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log 
            print("     -> ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏´‡∏£‡∏∑‡∏≠ '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')")
            return None # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•

    except TimeoutException:
         current_state = "unknown"
         try:
             if driver: current_state = driver.execute_script('return document.readyState;')
         except: pass
         if current_state != 'complete':
             print(f"     ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: Timeout! ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à (State: {current_state}) ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ")
         else:
             print(f"     ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: Timeout! ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 3 ‡∏ô‡∏≤‡∏ó‡∏µ")
         return None
    except Exception as e:
        print(f"     ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Selenium: {e}")
        return None
    finally:
        if driver:
            print("     ‡∏õ‡∏¥‡∏î‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå...")
            driver.quit()

# --- 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° Dictionary ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ---
CATEGORIES_KEYWORDS = {
    "‡∏õ‡∏π‡∏ô‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï": ['‡∏õ‡∏π‡∏ô‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå', '‡∏ã‡∏µ‡πÄ‡∏°‡∏ô‡∏ï‡πå', '‡∏õ‡∏π‡∏ô', '‡πÑ‡∏Æ‡∏î‡∏£‡∏≠‡∏•‡∏¥‡∏Å', '‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏£‡∏µ‡∏ï', '‡∏ú‡∏™‡∏°‡πÄ‡∏™‡∏£‡πá‡∏à', '‡∏°‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏£‡πå', '‡∏Å‡πà‡∏≠', '‡∏â‡∏≤‡∏ö', '‡πÄ‡∏ó', '‡∏≠‡∏¥‡∏ê‡∏ö‡∏•‡πá‡∏≠‡∏Å', '‡∏ö‡∏•‡πá‡∏≠‡∏Å'],
    "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÄ‡∏´‡∏•‡πá‡∏Å": ['‡πÄ‡∏´‡∏•‡πá‡∏Å', '‡πÄ‡∏´‡∏•‡πá‡∏Å‡πÄ‡∏™‡πâ‡∏ô', '‡πÄ‡∏´‡∏•‡πá‡∏Å‡∏£‡∏π‡∏õ‡∏û‡∏£‡∏£‡∏ì', '‡πÑ‡∏ß‡∏£‡πå‡πÄ‡∏°‡∏ä', '‡∏ï‡∏∞‡πÅ‡∏Å‡∏£‡∏á', '‡∏•‡∏ß‡∏î'],
    "‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏£‡∏≤‡∏°‡∏¥‡∏Å": ['‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á', '‡πÄ‡∏ã‡∏£‡∏≤‡∏°‡∏¥‡∏Å', '‡πÅ‡∏Å‡∏£‡∏ô‡∏¥‡∏ï‡πÇ‡∏ï‡πâ', '‡∏õ‡∏π‡∏û‡∏∑‡πâ‡∏ô', '‡∏ö‡∏∏‡∏ú‡∏ô‡∏±‡∏á'],
    "‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡πÄ‡∏Ñ‡∏°‡∏µ‡∏†‡∏±‡∏ì‡∏ë‡πå": ['‡∏™‡∏µ', '‡∏™‡∏µ‡∏ó‡∏≤', '‡πÄ‡∏ö‡∏™', '‡∏£‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô', '‡πÄ‡∏Ñ‡∏°‡∏µ‡∏†‡∏±‡∏ì‡∏ë‡πå', '‡∏Å‡∏±‡∏ô‡∏ã‡∏∂‡∏°', '‡∏Å‡∏≤‡∏ß', '‡∏¢‡∏≤‡πÅ‡∏ô‡∏ß'],
    "‡∏ß‡∏±‡∏™‡∏î‡∏∏‡∏°‡∏∏‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤": ['‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤', '‡πÄ‡∏°‡∏ó‡∏±‡∏•‡∏ä‡∏µ‡∏ó', '‡∏•‡∏≠‡∏ô', '‡∏ã‡∏µ‡πÅ‡∏û‡∏Ñ', '‡∏Å‡∏£‡∏∞‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤'],
    "‡∏â‡∏ô‡∏ß‡∏ô‡∏Å‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô": ['‡∏â‡∏ô‡∏ß‡∏ô', '‡πÉ‡∏¢‡πÅ‡∏Å‡πâ‡∏ß', '‡πÉ‡∏¢‡∏´‡∏¥‡∏ô', '‡∏û‡∏µ‡∏¢‡∏π‡πÇ‡∏ü‡∏°', 'PU Foam'],
    "‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÅ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á": ['‡∏õ‡∏£‡∏∞‡∏ï‡∏π', '‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á', '‡∏ß‡∏á‡∏Å‡∏ö', 'uPVC', '‡∏≠‡∏•‡∏π‡∏°‡∏¥‡πÄ‡∏ô‡∏µ‡∏¢‡∏°'],
    "‡∏Å‡∏£‡∏∞‡∏à‡∏Å": ['‡∏Å‡∏£‡∏∞‡∏à‡∏Å'],
    "‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå": ['‡∏™‡∏∏‡∏Ç‡∏†‡∏±‡∏ì‡∏ë‡πå', '‡∏ä‡∏±‡∏Å‡πÇ‡∏Ñ‡∏£‡∏Å', '‡∏≠‡πà‡∏≤‡∏á‡∏•‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤', '‡∏Å‡πä‡∏≠‡∏Å'],
}

# --- 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö style=_TABLE ‡∏Å‡∏≤‡∏£‡πå‡∏î + ‡πÄ‡∏û‡∏¥‡πà‡∏° Category) ---
def parse_product_data(html_content, year_be, quarter): # ‡πÄ‡∏û‡∏¥‡πà‡∏° quarter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Debug
    if not html_content: return []
    print(f"   ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Parsing) ‡∏õ‡∏µ {year_be} ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ {quarter} ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î...")
    soup = BeautifulSoup(html_content, 'html.parser')
    all_products = []
    main_table = soup.find('table', class_='catalog-table') # <--- ‡∏ä‡∏∑‡πà‡∏≠ class ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
    if not main_table:
        print(f"   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å 'catalog-table' ‡πÉ‡∏ô‡∏õ‡∏µ {year_be}/Q{quarter}!")
        return []
    product_rows = main_table.find('tbody').find_all('tr', recursive=False)
    if not product_rows:
        print(f"   ‚ö†Ô∏è ‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß (tr) ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÉ‡∏ô‡∏õ‡∏µ {year_be}/Q{quarter}!")
        return []

    processed_count = 0
    for i, row in enumerate(product_rows):
        table = row.find('table', class_='catalog-template')
        if not table: continue
        product_id = f"CFP_Y{year_be}Q{quarter}_R{i+1}"; label_logo_type = "UNKNOWN"; product_name = None; functional_unit = None; scope = None; company_name = None; contact_person = None; phone = None; email = None; image_url = 'N/A'; detail_page_url = None; carbon_value = None; carbon_unit = None; cert_start_date_iso = None; cert_end_date_iso = None
        category = "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"
        try:
            header_span = table.find('th', class_='catalog-header').find('span')
            if header_span:
                product_id = header_span.text.strip()
                if "CFR" in product_id: label_logo_type = "CFR"
                elif "CFP" in product_id: label_logo_type = "CFP"
            name_tag = table.find('h1')
            if name_tag: product_name = name_tag.text.strip()
            if product_name:
                product_name_lower = product_name.lower()
                for cat, keywords in CATEGORIES_KEYWORDS.items():
                    if any(keyword in product_name_lower for keyword in keywords):
                        category = cat
                        break
            col_r = table.find('td', class_='catalog-col-r')
            if col_r:
                img_tag = col_r.find('img');
                if not img_tag: img_tag = col_r.find('p').find('img')
                if img_tag and img_tag.get('src'):
                    img_src = img_tag['src']; image_url = img_src if img_src.startswith('http') else BASE_URL + img_src.lstrip('/')
                qr_div = col_r.find('div', class_='catalog-qrcode');
                if qr_div:
                    qr_link = qr_div.find('a');
                    if qr_link and qr_link.get('href'): detail_page_url = qr_link['href']
            col_l = table.find('td', class_='catalog-col-l')
            if col_l:
                if not product_name:
                     all_text_nodes = col_l.find_all(string=True, recursive=False);
                     if all_text_nodes: product_name = all_text_nodes[0].strip()
                full_text_col_l = col_l.get_text(separator='\n', strip=True)
                unit_match = re.search(r"‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:\s*(.+)", full_text_col_l);
                if unit_match: functional_unit = unit_match.group(1).strip()
                scope_match = re.search(r"‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï:\s*(.+)", full_text_col_l);
                if scope_match: scope = scope_match.group(1).strip()
                strong_tag = col_l.find('strong');
                if strong_tag: company_name = strong_tag.text.strip()
                contact_match = re.search(r"‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠\s*(.+)", full_text_col_l, re.MULTILINE);
                if contact_match: contact_person = contact_match.group(1).strip()
                phone_match = re.search(r"‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå\s*([^#\n]+)(?:#(\d+))?", full_text_col_l, re.MULTILINE);
                if phone_match:
                    phone = phone_match.group(1).strip();
                    if phone_match.group(2): phone += f" #{phone_match.group(2).strip()}"
                email_match = re.search(r"‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πå\s*(.+)", full_text_col_l, re.MULTILINE);
                if email_match: email = email_match.group(1).strip()
                carbon_match = re.search(r"(‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡∏≠‡∏ô‡∏ü‡∏∏‡∏ï‡∏û‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡πå|Carbon Footprint|‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡πà‡∏≠‡∏¢)[^:]*:\s*([\d,.-]+)\s*(.*)", full_text_col_l);
                if carbon_match:
                    carbon_value_str = carbon_match.group(2).replace(',', ''); carbon_unit = carbon_match.group(3).strip();
                    if carbon_value_str and carbon_value_str != '-':
                        try: carbon_value = float(carbon_value_str)
                        except ValueError: pass
                date_match = re.search(r"(‡∏ß‡∏±‡∏ô‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á|Date of Approval)[^:]*:\s*(\d{1,2}/\d{1,2}/\d{4})\s*-\s*(\d{1,2}/\d{1,2}/\d{4})", full_text_col_l);
                if date_match:
                    cert_start_date_iso = convert_be_to_iso(date_match.group(2)); cert_end_date_iso = convert_be_to_iso(date_match.group(3))
            product_data = {
                "product_id": product_id, "label_type": label_logo_type,
                "product_name": product_name, "category": category,
                "functional_unit": functional_unit, "scope": scope,
                "company_name": company_name, "contact_person": contact_person,
                "phone": phone, "email": email, "image_url": image_url,
                "detail_page_url": detail_page_url,
                "carbon_value": carbon_value, "carbon_unit": carbon_unit,
                "cert_start_date": cert_start_date_iso, "cert_end_date": cert_end_date_iso,
            }
            all_products.append(product_data)
            processed_count += 1
        except Exception as e:
            # print(f"   - ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {i+1} ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Error: {e} (ID: {product_id})")
            continue
    return all_products


# --- 7. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Supabase ---
def upload_to_supabase(products_list):
    if not products_list:
        print("   -> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á")
        return True
    print(f"   -> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á {len(products_list)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤ Supabase...")
    try:
        data, count = supabase.table('materials').upsert(
            products_list,
            on_conflict='product_id',
        ).execute()
        print("   -> ‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        return True
    except Exception as e:
        print(f"   -> ‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ï‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤ Supabase: {e}")
        return False

# --- 8. ‡∏™‡πà‡∏ß‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å (‡πÅ‡∏ö‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ ‡∏õ‡∏µ -> ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ -> ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó + [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö print) ---
if __name__ == "__main__":
    start_year_be = 2010 # üéØ ‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (CFP ‡πÄ‡∏£‡∏¥‡πà‡∏° 2010)
    end_year_be = 2025  # ‡∏õ‡∏µ ‡∏û.‡∏®. ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î

    total_products_scraped_all_periods = 0
    processed_tasks = 0

    print(f"=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CFP (2010+) ‡πÅ‡∏•‡∏∞ CFR (2014+) ... ===")

    # üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    scrape_types = [
        {"label": "CFP", "section": "_SBPRODUCTS"},
        {"label": "CFR", "section": "_SBREDUCTION"}
    ]

    for year_be in range(start_year_be, end_year_be + 1): # ‡∏•‡∏π‡∏õ‡∏ô‡∏µ‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 2010
        print(f"\n--- ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏õ‡∏µ ‡∏û.‡∏®. {year_be} ---")
        
        # üéØ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ 1 ‡∏ñ‡∏∂‡∏á 4
        for quarter in range(1, 5):
            print(f" ¬†--- ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ {quarter} ---")

            # üéØ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (CFP ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß CFR)
            for scrape_type in scrape_types:
                
                label = scrape_type["label"]
                section = scrape_type["section"]

                # --- üéØ [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏ï‡∏£‡∏£‡∏Å‡∏∞‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≤‡∏° + ‡∏à‡∏±‡∏î‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö print ---
                
                # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞ CFR ‡∏ñ‡πâ‡∏≤‡∏¢‡∏µ‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡∏õ‡∏µ 2014
                if label == "CFR" and year_be < 2014:
                    # [‡πÉ‡∏´‡∏°‡πà] ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≤‡∏°
                    print(f" ¬† ¬†[‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {label}] ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏õ‡∏µ {year_be} (CFR ‡πÄ‡∏£‡∏¥‡πà‡∏° 2014)") 
                    processed_tasks += 1 
                    continue # ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏á‡∏≤‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                
                # [‡πÉ‡∏´‡∏°‡πà] ‡∏¢‡πâ‡∏≤‡∏¢ print ‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ "‡πÑ‡∏°‡πà‡∏Ç‡πâ‡∏≤‡∏°")
                print(f"\n ¬† ¬†--- [‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {label}] ---") 
                # --- üéØ [‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ---

                # ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (CFP ‡∏´‡∏£‡∏∑‡∏≠ CFR)
                period_url = f'https://thaicarbonlabel.tgo.or.th/index.php?lang=TH&mod=WTJGMFlXeHZadz09&action=Y0c5emRBPT0&section={section}&industry=3&style=_ROW&sorting=_ASC&year={year_be}&quarter={quarter}'
                                    
                html = fetch_tgo_data_with_selenium(period_url) 

                if html:
                    products_this_period = parse_product_data(html, year_be, quarter)

                    if products_this_period:
                        initial_count = len(products_this_period)

                        unique_products_dict = {}
                        for product in products_this_period:
                            pid = product.get('product_id', f"TEMP_Y{year_be}Q{quarter}_{len(unique_products_dict)}")
                            if pid != "ID_NOT_FOUND" and pid not in unique_products_dict:
                                unique_products_dict[pid] = product
                        unique_products_this_period = list(unique_products_dict.values())
                        filtered_count = len(unique_products_this_period)

                        if filtered_count < initial_count:
                            print(f" ¬† ‚ö†Ô∏è [{label}] ‡∏Å‡∏£‡∏≠‡∏á ID ‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ {filtered_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™‡∏ô‡∏µ‡πâ")

                        print(f" ¬† ‚úÖ [{label}] ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {year_be}/Q{quarter} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÑ‡∏î‡πâ {filtered_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á ID ‡∏ã‡πâ‡∏≥)")
                        total_products_scraped_all_periods += filtered_count

                        if not upload_to_supabase(unique_products_this_period):
                            print(f" ¬† ‚ùå [{label}] ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ {year_be}/Q{quarter} ‡πÄ‡∏Ç‡πâ‡∏≤ Supabase ‡πÑ‡∏î‡πâ, ‡∏Ç‡πâ‡∏≤‡∏°...")
                    else:
                        print(f" ¬† ‚ö†Ô∏è [{label}] ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏õ‡∏µ {year_be}/Q{quarter} (Parser ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)")
                else:
                    print(f" ¬† ‚ö†Ô∏è [{label}] ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á HTML ‡∏Ç‡∏≠‡∏á‡∏õ‡∏µ {year_be}/Q{quarter} ‡πÑ‡∏î‡πâ, ‡∏Ç‡πâ‡∏≤‡∏°...")

                processed_tasks += 1
                if html: 
                    print(f" ¬† --- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î {label} ‡∏õ‡∏µ {year_be}/Q{quarter}, ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ---") 
                    time.sleep(3) 

            # üéØ [‡∏•‡∏ö‡∏≠‡∏≠‡∏Å] ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î "‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™" ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ

        print(f"--- ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏õ‡∏µ {year_be} ---")

    print(f"\n=== ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ ===")
    print(f"‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {processed_tasks} ‡∏á‡∏≤‡∏ô (‡∏õ‡∏µ x ‡πÑ‡∏ï‡∏£‡∏°‡∏≤‡∏™ x ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó, ‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≤‡∏°)")
    print(f"‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå (CFP+CFR) (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ ID) ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_products_scraped_all_periods} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
